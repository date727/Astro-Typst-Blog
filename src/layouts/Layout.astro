<!doctype html>
<html lang="zh-cn">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title><slot name="title" /></title>

		<!-- 全局字体预加载 -->
		<link 
			rel="preload" 
			href="/fonts/consola-1.woff2"
			as="font" 
			type="font/woff2" 
			crossorigin 
		/>

		<style>
			/* 全局字体声明 - 使用block策略确保字体加载前不显示内容 */
			@font-face {
				font-family: 'MyConsola';
				src: url('/fonts/consola-1.woff2') format('woff2');
				font-weight: normal;
				font-style: normal;
				font-display: block; /* 关键修改：使用block策略 */
			}

			/* 基础样式与动画变量 */
			:root {
				--transition-speed: 0.3s;
				--content-delay: 0.1s;
			}

			body {
				margin: 0;
				background-color: #fafaf0;
				/* 使用单一字体，避免字体栈切换 */
				font-family: 'MyConsola', monospace;
				/* 移除visibility隐藏，让内容始终可见 */
			}

			/* 字体加载期间的占位样式 */
			.font-loading body {
				/* 使用与目标字体相似的度量标准 */
				font-family: 'Courier New', monospace;
				/* 添加轻微的透明度过渡 */
				opacity: 0.95;
			}

			/* 字体加载完成后的最终样式 */
			.font-loaded body {
				font-family: 'MyConsola', monospace;
				opacity: 1;
				/* 平滑过渡效果 */
				transition: opacity 0.2s ease-in-out;
			}

			nav {
				padding: 1.5rem 1rem;
				max-width: 800px;
				margin: 0 auto;
				text-align: right;
				border-bottom: 1px solid rgb(0, 128, 128);
				position: relative;
				z-index: 10;
			}

			nav a {
				margin-right: 1rem;
				text-decoration: none;
				font-weight: bold;
				color: #333;
			}

			/* 主内容动态效果 */
			main {
				padding: 2rem;
				max-width: 800px;
				margin: 0 auto;
				/* 初始状态 */
				opacity: 0;
				transform: translateY(10px);
				/* 动画过渡 */
				transition: 
					opacity var(--transition-speed) ease,
					transform var(--transition-speed) ease;
				transition-delay: var(--content-delay);
			}

			/* 页面加载完成后显示内容 */
			.page-loaded main {
				opacity: 1;
				transform: translateY(0);
			}

			/* 页面切换时的动画状态 */
			.page-transition main {
				opacity: 0;
				transform: translateY(10px);
			}

			/* 字体加载指示器（可选） */
			.font-indicator {
				position: fixed;
				top: 10px;
				right: 10px;
				width: 8px;
				height: 8px;
				background-color: #ff6b6b;
				border-radius: 50%;
				opacity: 0;
				transition: opacity 0.3s ease;
				z-index: 1000;
			}

			.font-loading .font-indicator {
				opacity: 1;
			}

			.font-loaded .font-indicator {
				background-color: #51cf66;
				opacity: 0;
				transition: opacity 0.3s ease 0.5s;
			}
		</style>
	</head>
	<body class="font-loading">
		<!-- 字体加载指示器 -->
		<div class="font-indicator"></div>
		
		<nav>
			<a href="/">Home</a>
			<a href="/about/">About</a>
			<a href="/blog/">Blog</a>
			<a href="/comments">Comment</a>
		</nav>

		<main>
			<slot />
		</main>

		<script>
			// 优化的字体加载管理器
			const FontManager = {
				isFontLoaded: false,
				loadPromise: null,
				
				// 检查字体是否已加载
				checkFontLoaded() {
					if (this.isFontLoaded) return Promise.resolve();
					
					if (!this.loadPromise) {
						this.loadPromise = new Promise((resolve) => {
							// 检查浏览器是否支持 FontFace API
							if (document.fonts && 'load' in document.fonts) {
								// 使用document.fonts.load方法检查字体
								document.fonts.load('1em MyConsola').then(() => {
									this.isFontLoaded = true;
									this.updateFontState();
									resolve();
								}).catch(() => {
									// 字体加载失败，仍然标记为已加载
									console.warn('字体加载失败，使用后备字体');
									this.isFontLoaded = true;
									this.updateFontState();
									resolve();
								});
							} else {
								// 不支持 FontFace API 的浏览器
								setTimeout(() => {
									this.isFontLoaded = true;
									this.updateFontState();
									resolve();
								}, 50); // 减少延迟时间
							}
						});
					}
					
					return this.loadPromise;
				},

				// 更新字体状态
				updateFontState() {
					// 移除加载状态类，添加完成状态类
					document.documentElement.classList.remove('font-loading');
					document.documentElement.classList.add('font-loaded');
					
					// 触发页面内容动画
					if (window.PageManager) {
						window.PageManager.triggerContentAnimation();
					}
				}
			};

			// 页面加载和切换管理器
			const PageManager = {
				contentAnimationTriggered: false,
				
				init() {
					// 将PageManager暴露到全局作用域
					window.PageManager = this;
					
					// 初始化字体加载
					FontManager.checkFontLoaded().then(() => {
						// 字体加载完成后设置页面过渡
						this.setupPageTransitions();
					});
				},
				
				// 触发内容动画
				triggerContentAnimation() {
					if (!this.contentAnimationTriggered) {
						this.contentAnimationTriggered = true;
						document.body.classList.add('page-loaded');
					}
				},
				
				setupPageTransitions() {
					// 页面DOM加载完成后检查是否需要触发动画
					document.addEventListener('DOMContentLoaded', () => {
						// 如果字体已经加载，立即触发内容动画
						if (FontManager.isFontLoaded) {
							this.triggerContentAnimation();
						}
					});
					
					// 设置页面切换过渡
					document.querySelectorAll('nav a').forEach(link => {
						link.addEventListener('click', (e) => {
							// 执行页面切换动画
							document.body.classList.remove('page-loaded');
							document.body.classList.add('page-transition');
							
							// 确保过渡动画完成
							setTimeout(() => {
								document.body.classList.remove('page-transition');
							}, 300);
						});
					});
				}
			};

			// 初始化页面管理器
			PageManager.init();
		</script>
	</body>
</html>